// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GetInformationClient is the client API for GetInformation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetInformationClient interface {
	GetByInn(ctx context.Context, in *GetInformationRequest, opts ...grpc.CallOption) (*GetInformationResponse, error)
}

type getInformationClient struct {
	cc grpc.ClientConnInterface
}

func NewGetInformationClient(cc grpc.ClientConnInterface) GetInformationClient {
	return &getInformationClient{cc}
}

func (c *getInformationClient) GetByInn(ctx context.Context, in *GetInformationRequest, opts ...grpc.CallOption) (*GetInformationResponse, error) {
	out := new(GetInformationResponse)
	err := c.cc.Invoke(ctx, "/api.GetInformation/GetByInn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetInformationServer is the server API for GetInformation service.
// All implementations must embed UnimplementedGetInformationServer
// for forward compatibility
type GetInformationServer interface {
	GetByInn(context.Context, *GetInformationRequest) (*GetInformationResponse, error)
}

// UnimplementedGetInformationServer must be embedded to have forward compatible implementations.
type UnimplementedGetInformationServer struct {
}

func (UnimplementedGetInformationServer) GetByInn(context.Context, *GetInformationRequest) (*GetInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByInn not implemented")
}
func (UnimplementedGetInformationServer) mustEmbedUnimplementedGetInformationServer() {}

// UnsafeGetInformationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetInformationServer will
// result in compilation errors.
type UnsafeGetInformationServer interface {
	mustEmbedUnimplementedGetInformationServer()
}

func RegisterGetInformationServer(s grpc.ServiceRegistrar, srv GetInformationServer) {
	s.RegisterService(&GetInformation_ServiceDesc, srv)
}

func _GetInformation_GetByInn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetInformationServer).GetByInn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GetInformation/GetByInn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetInformationServer).GetByInn(ctx, req.(*GetInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GetInformation_ServiceDesc is the grpc.ServiceDesc for GetInformation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetInformation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.GetInformation",
	HandlerType: (*GetInformationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetByInn",
			Handler:    _GetInformation_GetByInn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api.proto",
}
